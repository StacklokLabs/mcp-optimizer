# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8080/api/openapi.json
#   timestamp: 2025-09-30T12:49:55+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Field

from . import permissions as permissions_1


class EnvVar(BaseModel):
    default: Optional[str] = Field(
        None,
        description='Default is the value to use if the environment variable is not explicitly provided\nOnly used for non-required variables',
    )
    description: Optional[str] = Field(
        None,
        description="Description is a human-readable explanation of the variable's purpose",
    )
    name: Optional[str] = Field(
        None, description='Name is the environment variable name (e.g., API_KEY)'
    )
    required: Optional[bool] = Field(
        None,
        description='Required indicates whether this environment variable must be provided\nIf true and not provided via command line or secrets, the user will be prompted for a value',
    )
    secret: Optional[bool] = Field(
        None,
        description='Secret indicates whether this environment variable contains sensitive information\nIf true, the value will be stored as a secret rather than as a plain environment variable',
    )


class Header(BaseModel):
    choices: Optional[list[str]] = Field(
        None,
        description='Choices provides a list of valid values for the header (optional)',
    )
    default: Optional[str] = Field(
        None,
        description='Default is the value to use if the header is not explicitly provided\nOnly used for non-required headers',
    )
    description: Optional[str] = Field(
        None,
        description="Description is a human-readable explanation of the header's purpose",
    )
    name: Optional[str] = Field(
        None, description='Name is the header name (e.g., X-API-Key, Authorization)'
    )
    required: Optional[bool] = Field(
        None,
        description='Required indicates whether this header must be provided\nIf true and not provided via command line or secrets, the user will be prompted for a value',
    )
    secret: Optional[bool] = Field(
        None,
        description='Secret indicates whether this header contains sensitive information\nIf true, the value will be stored as a secret rather than as plain text',
    )


class Metadata(BaseModel):
    last_updated: Optional[str] = Field(
        None,
        description='LastUpdated is the timestamp when the server was last updated, in RFC3339 format',
    )
    pulls: Optional[int] = Field(
        None,
        description='Pulls indicates how many times the server image has been downloaded',
    )
    stars: Optional[int] = Field(
        None,
        description='Stars represents the popularity rating or number of stars for the server',
    )


class OAuthConfig(BaseModel):
    authorize_url: Optional[str] = Field(
        None,
        description='AuthorizeURL is the OAuth authorization endpoint URL\nUsed for non-OIDC OAuth flows when issuer is not provided',
    )
    callback_port: Optional[int] = Field(
        None,
        description='CallbackPort is the specific port to use for the OAuth callback server\nIf not specified, a random available port will be used',
    )
    client_id: Optional[str] = Field(
        None, description='ClientID is the OAuth client ID for authentication'
    )
    issuer: Optional[str] = Field(
        None,
        description='Issuer is the OAuth/OIDC issuer URL (e.g., https://accounts.google.com)\nUsed for OIDC discovery to find authorization and token endpoints',
    )
    oauth_params: Optional[dict[str, str]] = Field(
        None,
        description='OAuthParams contains additional OAuth parameters to include in the authorization request\nThese are server-specific parameters like "prompt", "response_mode", etc.',
    )
    scopes: Optional[list[str]] = Field(
        None,
        description='Scopes are the OAuth scopes to request\nIf not specified, defaults to ["openid", "profile", "email"] for OIDC',
    )
    token_url: Optional[str] = Field(
        None,
        description='TokenURL is the OAuth token endpoint URL\nUsed for non-OIDC OAuth flows when issuer is not provided',
    )
    use_pkce: Optional[bool] = Field(
        None,
        description='UsePKCE indicates whether to use PKCE for the OAuth flow\nDefaults to true for enhanced security',
    )


class RemoteServerMetadata(BaseModel):
    custom_metadata: Optional[dict[str, Any]] = Field(
        None, description='CustomMetadata allows for additional user-defined metadata'
    )
    description: Optional[str] = Field(
        None,
        description="Description is a human-readable description of the server's purpose and functionality",
    )
    env_vars: Optional[list[EnvVar]] = Field(
        None,
        description='EnvVars defines environment variables that can be passed to configure the client\nThese might be needed for client-side configuration when connecting to the remote server',
    )
    headers: Optional[list[Header]] = Field(
        None,
        description="Headers defines HTTP headers that can be passed to the remote server for authentication\nThese are used with the thv proxy command's authentication features",
    )
    metadata: Optional[Metadata] = None
    name: Optional[str] = Field(
        None,
        description='Name is the identifier for the MCP server, used when referencing the server in commands\nIf not provided, it will be auto-generated from the registry key',
    )
    oauth_config: Optional[OAuthConfig] = None
    repository_url: Optional[str] = Field(
        None,
        description='RepositoryURL is the URL to the source code repository for the server',
    )
    status: Optional[str] = Field(
        None,
        description='Status indicates whether the server is currently active or deprecated',
    )
    tags: Optional[list[str]] = Field(
        None,
        description='Tags are categorization labels for the server to aid in discovery and filtering',
    )
    tier: Optional[str] = Field(
        None,
        description='Tier represents the tier classification level of the server, e.g., "Official" or "Community"',
    )
    tools: Optional[list[str]] = Field(
        None, description='Tools is a list of tool names provided by this MCP server'
    )
    transport: Optional[str] = Field(
        None,
        description='Transport defines the communication protocol for the server\nFor containers: stdio, sse, or streamable-http\nFor remote servers: sse or streamable-http (stdio not supported)',
    )
    url: Optional[str] = Field(
        None,
        description='URL is the endpoint URL for the remote MCP server (e.g., https://api.example.com/mcp)',
    )


class VerifiedAttestation(BaseModel):
    predicate: Optional[Any] = None
    predicate_type: Optional[str] = None


class Provenance(BaseModel):
    attestation: Optional[VerifiedAttestation] = None
    cert_issuer: Optional[str] = None
    repository_ref: Optional[str] = None
    repository_uri: Optional[str] = None
    runner_environment: Optional[str] = None
    signer_identity: Optional[str] = None
    sigstore_url: Optional[str] = None


class ImageMetadata(BaseModel):
    args: Optional[list[str]] = Field(
        None,
        description='Args are the default command-line arguments to pass to the MCP server container.\nThese arguments will be used only if no command-line arguments are provided by the user.\nIf the user provides arguments, they will override these defaults.',
    )
    custom_metadata: Optional[dict[str, Any]] = Field(
        None, description='CustomMetadata allows for additional user-defined metadata'
    )
    description: Optional[str] = Field(
        None,
        description="Description is a human-readable description of the server's purpose and functionality",
    )
    docker_tags: Optional[list[str]] = Field(
        None,
        description='DockerTags lists the available Docker tags for this server image',
    )
    env_vars: Optional[list[EnvVar]] = Field(
        None,
        description='EnvVars defines environment variables that can be passed to the server',
    )
    image: Optional[str] = Field(
        None, description='Image is the Docker image reference for the MCP server'
    )
    metadata: Optional[Metadata] = None
    name: Optional[str] = Field(
        None,
        description='Name is the identifier for the MCP server, used when referencing the server in commands\nIf not provided, it will be auto-generated from the registry key',
    )
    permissions: Optional[permissions_1.Profile] = None
    provenance: Optional[Provenance] = None
    repository_url: Optional[str] = Field(
        None,
        description='RepositoryURL is the URL to the source code repository for the server',
    )
    status: Optional[str] = Field(
        None,
        description='Status indicates whether the server is currently active or deprecated',
    )
    tags: Optional[list[str]] = Field(
        None,
        description='Tags are categorization labels for the server to aid in discovery and filtering',
    )
    target_port: Optional[int] = Field(
        None,
        description='TargetPort is the port for the container to expose (only applicable to SSE and Streamable HTTP transports)',
    )
    tier: Optional[str] = Field(
        None,
        description='Tier represents the tier classification level of the server, e.g., "Official" or "Community"',
    )
    tools: Optional[list[str]] = Field(
        None, description='Tools is a list of tool names provided by this MCP server'
    )
    transport: Optional[str] = Field(
        None,
        description='Transport defines the communication protocol for the server\nFor containers: stdio, sse, or streamable-http\nFor remote servers: sse or streamable-http (stdio not supported)',
    )


class Group(BaseModel):
    description: Optional[str] = Field(
        None,
        description="Description is a human-readable description of the group's purpose and functionality",
    )
    name: Optional[str] = Field(
        None,
        description='Name is the identifier for the group, used when referencing the group in commands',
    )
    remote_servers: Optional[dict[str, RemoteServerMetadata]] = Field(
        None,
        description='RemoteServers is a map of server names to their corresponding remote server definitions within this group',
    )
    servers: Optional[dict[str, ImageMetadata]] = Field(
        None,
        description='Servers is a map of server names to their corresponding server definitions within this group',
    )


class Registry(BaseModel):
    groups: Optional[list[Group]] = Field(
        None,
        description='Groups is a slice of group definitions containing related MCP servers',
    )
    last_updated: Optional[str] = Field(
        None,
        description='LastUpdated is the timestamp when the registry was last updated, in RFC3339 format',
    )
    remote_servers: Optional[dict[str, RemoteServerMetadata]] = Field(
        None,
        description='RemoteServers is a map of server names to their corresponding remote server definitions\nThese are MCP servers accessed via HTTP/HTTPS using the thv proxy command',
    )
    servers: Optional[dict[str, ImageMetadata]] = Field(
        None,
        description='Servers is a map of server names to their corresponding server definitions',
    )
    version: Optional[str] = Field(
        None, description='Version is the schema version of the registry'
    )
