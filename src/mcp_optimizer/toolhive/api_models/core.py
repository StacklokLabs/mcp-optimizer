# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8080/api/openapi.json
#   timestamp: 2025-09-30T12:49:55+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class Workload(BaseModel):
    created_at: Optional[str] = Field(
        None, description='CreatedAt is the timestamp when the workload was created.'
    )
    group: Optional[str] = Field(
        None,
        description='Group is the name of the group this workload belongs to, if any.',
    )
    labels: Optional[dict[str, str]] = Field(
        None,
        description='Labels are the container labels (excluding standard ToolHive labels)',
    )
    name: Optional[str] = Field(
        None,
        description='Name is the name of the workload.\nIt is used as a unique identifier.',
    )
    package: Optional[str] = Field(
        None,
        description='Package specifies the Workload Package used to create this Workload.',
    )
    port: Optional[int] = Field(
        None,
        description='Port is the port on which the workload is exposed.\nThis is embedded in the URL.',
    )
    proxy_mode: Optional[str] = Field(
        None,
        description='ProxyMode is the proxy mode for stdio transport (sse or streamable-http).',
    )
    remote: Optional[bool] = Field(
        None,
        description='Remote indicates whether this is a remote workload (true) or a container workload (false).',
    )
    status: Optional[str] = Field(
        None, description='Status is the current status of the workload.'
    )
    status_context: Optional[str] = Field(
        None,
        description="StatusContext provides additional context about the workload's status.\nThe exact meaning is determined by the status and the underlying runtime.",
    )
    tool_type: Optional[str] = Field(
        None,
        description='ToolType is the type of tool this workload represents.\nFor now, it will always be "mcp" - representing an MCP server.',
    )
    tools: Optional[list[str]] = Field(
        None, description='ToolsFilter is the filter on tools applied to the workload.'
    )
    transport_type: Optional[str] = Field(
        None,
        description='TransportType is the type of transport used for this workload.',
    )
    url: Optional[str] = Field(
        None,
        description='URL is the URL of the workload exposed by the ToolHive proxy.',
    )
