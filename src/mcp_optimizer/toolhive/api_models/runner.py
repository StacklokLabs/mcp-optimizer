# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8080/api/openapi.json
#   timestamp: 2025-09-30T12:49:55+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field

from . import audit, auth, authz, ignore, permissions, registry, telemetry, types


class RemoteAuthConfig(BaseModel):
    authorize_url: Optional[str] = Field(None, alias='authorizeURL')
    callback_port: Optional[int] = Field(None, alias='callbackPort')
    client_id: Optional[str] = Field(None, alias='clientID')
    client_secret: Optional[str] = Field(None, alias='clientSecret')
    client_secret_file: Optional[str] = Field(None, alias='clientSecretFile')
    env_vars: Optional[list[registry.EnvVar]] = Field(
        None, alias='envVars', description='Environment variables for the client'
    )
    headers: Optional[list[registry.Header]] = Field(
        None, description='Headers for HTTP requests'
    )
    issuer: Optional[str] = Field(
        None, description='OAuth endpoint configuration (from registry)'
    )
    oauth_params: Optional[dict[str, str]] = Field(
        None,
        alias='oauthParams',
        description='OAuth parameters for server-specific customization',
    )
    scopes: Optional[list[str]] = None
    skip_browser: Optional[bool] = Field(None, alias='skipBrowser')
    timeout: Optional[str] = Field(None, examples=['5m'])
    token_url: Optional[str] = Field(None, alias='tokenURL')


class ToolOverride(BaseModel):
    description: Optional[str] = Field(
        None, description='Description is the redefined description of the tool'
    )
    name: Optional[str] = Field(
        None, description='Name is the redefined name of the tool'
    )


class RunConfig(BaseModel):
    audit_config: Optional[audit.Config] = None
    audit_config_path: Optional[str] = Field(
        None, description='AuditConfigPath is the path to the audit configuration file'
    )
    authz_config: Optional[authz.Config] = None
    authz_config_path: Optional[str] = Field(
        None,
        description='AuthzConfigPath is the path to the authorization configuration file',
    )
    base_name: Optional[str] = Field(
        None,
        description='BaseName is the base name used for the container (without prefixes)',
    )
    cmd_args: Optional[list[str]] = Field(
        None, description='CmdArgs are the arguments to pass to the container'
    )
    container_labels: Optional[dict[str, str]] = Field(
        None, description='ContainerLabels are the labels to apply to the container'
    )
    container_name: Optional[str] = Field(
        None, description='ContainerName is the name of the container'
    )
    debug: Optional[bool] = Field(
        None, description='Debug indicates whether debug mode is enabled'
    )
    env_file_dir: Optional[str] = Field(
        None,
        description='EnvFileDir is the directory path to load environment files from',
    )
    env_vars: Optional[dict[str, str]] = Field(
        None,
        description='EnvVars are the parsed environment variables as key-value pairs',
    )
    group: Optional[str] = Field(
        None,
        description='Group is the name of the group this workload belongs to, if any',
    )
    host: Optional[str] = Field(None, description='Host is the host for the HTTP proxy')
    ignore_config: Optional[ignore.Config] = None
    image: Optional[str] = Field(None, description='Image is the Docker image to run')
    isolate_network: Optional[bool] = Field(
        None,
        description='IsolateNetwork indicates whether to isolate the network for the container',
    )
    jwks_auth_token_file: Optional[str] = Field(
        None,
        description='JWKSAuthTokenFile is the path to file containing auth token for JWKS/OIDC requests',
    )
    k8s_pod_template_patch: Optional[str] = Field(
        None,
        description='K8sPodTemplatePatch is a JSON string to patch the Kubernetes pod template\nOnly applicable when using Kubernetes runtime',
    )
    middleware_configs: Optional[list[types.MiddlewareConfig]] = Field(
        None,
        description='MiddlewareConfigs contains the list of middleware to apply to the transport\nand the configuration for each middleware.',
    )
    name: Optional[str] = Field(None, description='Name is the name of the MCP server')
    oidc_config: Optional[auth.TokenValidatorConfig] = None
    permission_profile: Optional[permissions.Profile] = None
    permission_profile_name_or_path: Optional[str] = Field(
        None,
        description='PermissionProfileNameOrPath is the name or path of the permission profile',
    )
    port: Optional[int] = Field(
        None, description='Port is the port for the HTTP proxy to listen on (host port)'
    )
    proxy_mode: Optional[str] = Field(
        None,
        description='ProxyMode is the proxy mode for stdio transport ("sse" or "streamable-http")',
    )
    remote_auth_config: Optional[RemoteAuthConfig] = None
    remote_url: Optional[str] = Field(
        None,
        description='RemoteURL is the URL of the remote MCP server (if running remotely)',
    )
    schema_version: Optional[str] = Field(
        None, description='SchemaVersion is the version of the RunConfig schema'
    )
    secrets: Optional[list[str]] = Field(
        None,
        description='Secrets are the secret parameters to pass to the container\nFormat: "<secret name>,target=<target environment variable>"',
    )
    target_host: Optional[str] = Field(
        None,
        description='TargetHost is the host to forward traffic to (only applicable to SSE transport)',
    )
    target_port: Optional[int] = Field(
        None,
        description='TargetPort is the port for the container to expose (only applicable to SSE transport)',
    )
    telemetry_config: Optional[telemetry.Config] = None
    thv_ca_bundle: Optional[str] = Field(
        None,
        description='ThvCABundle is the path to the CA certificate bundle for ToolHive HTTP operations',
    )
    tools_filter: Optional[list[str]] = Field(
        None, description='ToolsFilter is the list of tools to filter'
    )
    tools_override: Optional[dict[str, ToolOverride]] = Field(
        None,
        description='ToolsOverride is a map from an actual tool to its overridden name and/or description',
    )
    transport: Optional[str] = Field(
        None,
        description='Transport is the transport mode (stdio, sse, or streamable-http)',
    )
    volumes: Optional[list[str]] = Field(
        None,
        description='Volumes are the directory mounts to pass to the container\nFormat: "host-path:container-path[:ro]"',
    )
