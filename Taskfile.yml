version: '3'

tasks:
  install:
    desc: Install dependencies
    cmds:
      - uv sync --dev --all-packages --group security

  lint:
    desc: Run linting with ruff
    cmds:
      - uv run ruff check .
    deps:
      - install

  format:
    desc: Fix linting issues and format code
    cmds:
      - uv run ruff format .
      - uv run ruff check --fix .
    deps:
      - install

  typecheck:
    desc: Run type checking with ty
    cmds:
      - uv run ty check .
    deps:
      - install

  test:
    desc: Run unit tests with pytest
    cmds:
      - uv run pytest
    deps:
      - install

  check:
    desc: Run all checks (lint, typecheck, tests, and security)
    deps:
      - lint
      - typecheck
      - test
      - security

  security:
    desc: Run security scanning
    cmds:
      # Note: safety tool has compatibility issues with current environment
      # - uv run safety check --save-json safety-report.json || true
      - uv run bandit -r src/ -f json -o bandit-report.json || true
      - uv run pip-audit --format=json --output=pip-audit-report.json || true
    deps:
      - install

  sbom:
    desc: Generate Software Bill of Materials (SBOM)
    cmds:
      - uv run cyclonedx-py environment --output-format json --output-file sbom.json
    deps:
      - install
  
  generate-thv-models:
    desc: Generate Pydantic models from Toolhive's OpenAPI specification
    cmds:
      - ./generate_toolhive_models.sh
    deps:
      - install

  run-migrations:
    desc: Run database migrations
    cmds:
      - uv run alembic upgrade head
    deps:
      - install

  run-container:
    desc: Run the application in a container
    cmds:
      - docker build -t mcp-optimizer .
      - docker rm -f mcp-optimizer-container || true
      - docker run --network host --name mcp-optimizer-container mcp-optimizer

  install-hooks:
    desc: Install git hooks for the project
    cmds:
      - ./scripts/install-hooks.sh

  run-locally:
    desc: Run the application locally
    env:
      TOOLHIVE_HOST: "localhost"
      TOOLHIVE_PORT: "8080"
    cmds:
      - uv run mtm
    deps:
      - install

  run-in-thv:
    desc: Build mcp-optimizer and run it in ToolHive
    cmds:
      - thv group create optim || true
      - thv rm mcp-optimizer || true
      - docker build -t mcp-optimizer .
      - thv run mcp-optimizer:latest --transport streamable-http --group optim
